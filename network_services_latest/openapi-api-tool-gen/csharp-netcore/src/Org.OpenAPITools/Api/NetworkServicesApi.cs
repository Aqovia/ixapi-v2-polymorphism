/* 
 * IX-API
 *
 *  This API allows to config/change/delete Internet Exchange services.  # Filters  When querying collections, the provided query parameters are validated. Unknown query parameters are ignored. Providing invalid filter values should yield a validation error. 
 *
 * The version of the OpenAPI document: 2.2.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface INetworkServicesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// List available &#x60;NetworkService&#x60;s.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Filter by id (optional)</param>
        /// <param name="state">Filter by state (optional)</param>
        /// <param name="stateIsNot">Filter by state__is_not (optional)</param>
        /// <param name="managingAccount">Filter by managing_account (optional)</param>
        /// <param name="consumingAccount">Filter by consuming_account (optional)</param>
        /// <param name="externalRef">Filter by external_ref (optional)</param>
        /// <param name="type">Filter by type (optional)</param>
        /// <param name="pop">Filter by pop (optional)</param>
        /// <param name="productOffering">Filter by product_offering (optional)</param>
        /// <returns>List&lt;NetworkService&gt;</returns>
        List<NetworkService> NetworkServicesList (List<string> id = default(List<string>), string state = default(string), string stateIsNot = default(string), string managingAccount = default(string), string consumingAccount = default(string), string externalRef = default(string), string type = default(string), string pop = default(string), string productOffering = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// List available &#x60;NetworkService&#x60;s.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Filter by id (optional)</param>
        /// <param name="state">Filter by state (optional)</param>
        /// <param name="stateIsNot">Filter by state__is_not (optional)</param>
        /// <param name="managingAccount">Filter by managing_account (optional)</param>
        /// <param name="consumingAccount">Filter by consuming_account (optional)</param>
        /// <param name="externalRef">Filter by external_ref (optional)</param>
        /// <param name="type">Filter by type (optional)</param>
        /// <param name="pop">Filter by pop (optional)</param>
        /// <param name="productOffering">Filter by product_offering (optional)</param>
        /// <returns>ApiResponse of List&lt;NetworkService&gt;</returns>
        ApiResponse<List<NetworkService>> NetworkServicesListWithHttpInfo (List<string> id = default(List<string>), string state = default(string), string stateIsNot = default(string), string managingAccount = default(string), string consumingAccount = default(string), string externalRef = default(string), string type = default(string), string pop = default(string), string productOffering = default(string));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface INetworkServicesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// List available &#x60;NetworkService&#x60;s.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Filter by id (optional)</param>
        /// <param name="state">Filter by state (optional)</param>
        /// <param name="stateIsNot">Filter by state__is_not (optional)</param>
        /// <param name="managingAccount">Filter by managing_account (optional)</param>
        /// <param name="consumingAccount">Filter by consuming_account (optional)</param>
        /// <param name="externalRef">Filter by external_ref (optional)</param>
        /// <param name="type">Filter by type (optional)</param>
        /// <param name="pop">Filter by pop (optional)</param>
        /// <param name="productOffering">Filter by product_offering (optional)</param>
        /// <returns>Task of List&lt;NetworkService&gt;</returns>
        System.Threading.Tasks.Task<List<NetworkService>> NetworkServicesListAsync (List<string> id = default(List<string>), string state = default(string), string stateIsNot = default(string), string managingAccount = default(string), string consumingAccount = default(string), string externalRef = default(string), string type = default(string), string pop = default(string), string productOffering = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// List available &#x60;NetworkService&#x60;s.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Filter by id (optional)</param>
        /// <param name="state">Filter by state (optional)</param>
        /// <param name="stateIsNot">Filter by state__is_not (optional)</param>
        /// <param name="managingAccount">Filter by managing_account (optional)</param>
        /// <param name="consumingAccount">Filter by consuming_account (optional)</param>
        /// <param name="externalRef">Filter by external_ref (optional)</param>
        /// <param name="type">Filter by type (optional)</param>
        /// <param name="pop">Filter by pop (optional)</param>
        /// <param name="productOffering">Filter by product_offering (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;NetworkService&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<NetworkService>>> NetworkServicesListAsyncWithHttpInfo (List<string> id = default(List<string>), string state = default(string), string stateIsNot = default(string), string managingAccount = default(string), string consumingAccount = default(string), string externalRef = default(string), string type = default(string), string pop = default(string), string productOffering = default(string));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface INetworkServicesApi : INetworkServicesApiSync, INetworkServicesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class NetworkServicesApi : INetworkServicesApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="NetworkServicesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public NetworkServicesApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="NetworkServicesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public NetworkServicesApi(String basePath)
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="NetworkServicesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public NetworkServicesApi(Org.OpenAPITools.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="NetworkServicesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public NetworkServicesApi(Org.OpenAPITools.Client.ISynchronousClient client,Org.OpenAPITools.Client.IAsynchronousClient asyncClient, Org.OpenAPITools.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Org.OpenAPITools.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Org.OpenAPITools.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  List available &#x60;NetworkService&#x60;s.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Filter by id (optional)</param>
        /// <param name="state">Filter by state (optional)</param>
        /// <param name="stateIsNot">Filter by state__is_not (optional)</param>
        /// <param name="managingAccount">Filter by managing_account (optional)</param>
        /// <param name="consumingAccount">Filter by consuming_account (optional)</param>
        /// <param name="externalRef">Filter by external_ref (optional)</param>
        /// <param name="type">Filter by type (optional)</param>
        /// <param name="pop">Filter by pop (optional)</param>
        /// <param name="productOffering">Filter by product_offering (optional)</param>
        /// <returns>List&lt;NetworkService&gt;</returns>
        public List<NetworkService> NetworkServicesList (List<string> id = default(List<string>), string state = default(string), string stateIsNot = default(string), string managingAccount = default(string), string consumingAccount = default(string), string externalRef = default(string), string type = default(string), string pop = default(string), string productOffering = default(string))
        {
             Org.OpenAPITools.Client.ApiResponse<List<NetworkService>> localVarResponse = NetworkServicesListWithHttpInfo(id, state, stateIsNot, managingAccount, consumingAccount, externalRef, type, pop, productOffering);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  List available &#x60;NetworkService&#x60;s.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Filter by id (optional)</param>
        /// <param name="state">Filter by state (optional)</param>
        /// <param name="stateIsNot">Filter by state__is_not (optional)</param>
        /// <param name="managingAccount">Filter by managing_account (optional)</param>
        /// <param name="consumingAccount">Filter by consuming_account (optional)</param>
        /// <param name="externalRef">Filter by external_ref (optional)</param>
        /// <param name="type">Filter by type (optional)</param>
        /// <param name="pop">Filter by pop (optional)</param>
        /// <param name="productOffering">Filter by product_offering (optional)</param>
        /// <returns>ApiResponse of List&lt;NetworkService&gt;</returns>
        public Org.OpenAPITools.Client.ApiResponse< List<NetworkService> > NetworkServicesListWithHttpInfo (List<string> id = default(List<string>), string state = default(string), string stateIsNot = default(string), string managingAccount = default(string), string consumingAccount = default(string), string externalRef = default(string), string type = default(string), string pop = default(string), string productOffering = default(string))
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("csv", "id", id));
            }
            if (state != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "state", state));
            }
            if (stateIsNot != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "state__is_not", stateIsNot));
            }
            if (managingAccount != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "managing_account", managingAccount));
            }
            if (consumingAccount != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "consuming_account", consumingAccount));
            }
            if (externalRef != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "external_ref", externalRef));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }
            if (pop != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "pop", pop));
            }
            if (productOffering != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "product_offering", productOffering));
            }

            // authentication (Bearer) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< List<NetworkService> >("/network-services", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("NetworkServicesList", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  List available &#x60;NetworkService&#x60;s.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Filter by id (optional)</param>
        /// <param name="state">Filter by state (optional)</param>
        /// <param name="stateIsNot">Filter by state__is_not (optional)</param>
        /// <param name="managingAccount">Filter by managing_account (optional)</param>
        /// <param name="consumingAccount">Filter by consuming_account (optional)</param>
        /// <param name="externalRef">Filter by external_ref (optional)</param>
        /// <param name="type">Filter by type (optional)</param>
        /// <param name="pop">Filter by pop (optional)</param>
        /// <param name="productOffering">Filter by product_offering (optional)</param>
        /// <returns>Task of List&lt;NetworkService&gt;</returns>
        public async System.Threading.Tasks.Task<List<NetworkService>> NetworkServicesListAsync (List<string> id = default(List<string>), string state = default(string), string stateIsNot = default(string), string managingAccount = default(string), string consumingAccount = default(string), string externalRef = default(string), string type = default(string), string pop = default(string), string productOffering = default(string))
        {
             Org.OpenAPITools.Client.ApiResponse<List<NetworkService>> localVarResponse = await NetworkServicesListAsyncWithHttpInfo(id, state, stateIsNot, managingAccount, consumingAccount, externalRef, type, pop, productOffering);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  List available &#x60;NetworkService&#x60;s.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Filter by id (optional)</param>
        /// <param name="state">Filter by state (optional)</param>
        /// <param name="stateIsNot">Filter by state__is_not (optional)</param>
        /// <param name="managingAccount">Filter by managing_account (optional)</param>
        /// <param name="consumingAccount">Filter by consuming_account (optional)</param>
        /// <param name="externalRef">Filter by external_ref (optional)</param>
        /// <param name="type">Filter by type (optional)</param>
        /// <param name="pop">Filter by pop (optional)</param>
        /// <param name="productOffering">Filter by product_offering (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;NetworkService&gt;)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<List<NetworkService>>> NetworkServicesListAsyncWithHttpInfo (List<string> id = default(List<string>), string state = default(string), string stateIsNot = default(string), string managingAccount = default(string), string consumingAccount = default(string), string externalRef = default(string), string type = default(string), string pop = default(string), string productOffering = default(string))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (id != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("csv", "id", id));
            }
            if (state != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "state", state));
            }
            if (stateIsNot != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "state__is_not", stateIsNot));
            }
            if (managingAccount != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "managing_account", managingAccount));
            }
            if (consumingAccount != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "consuming_account", consumingAccount));
            }
            if (externalRef != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "external_ref", externalRef));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }
            if (pop != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "pop", pop));
            }
            if (productOffering != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "product_offering", productOffering));
            }

            // authentication (Bearer) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<NetworkService>>("/network-services", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("NetworkServicesList", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}

# coding: utf-8

"""
    IX-API

     This API allows to config/change/delete Internet Exchange services.  # Filters  When querying collections, the provided query parameters are validated. Unknown query parameters are ignored. Providing invalid filter values should yield a validation error.   # noqa: E501

    The version of the OpenAPI document: 2.2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class NetworkServicePartial(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'consuming_account': 'str',
        'external_ref': 'str',
        'id': 'str',
        'ixfdb_ixid': 'int',
        'managing_account': 'str',
        'metro_area_network': 'str',
        'name': 'str',
        'network_features': 'list[str]',
        'nsc_required_contact_roles': 'list[str]',
        'peeringdb_ixid': 'int',
        'product_offering': 'str',
        'state': 'str',
        'status': 'list[Status]',
        'subnet_v4': 'str',
        'subnet_v6': 'str',
        'type': 'str',
        'billing_account': 'str',
        'capacity': 'int',
        'charged_until': 'date',
        'contract_ref': 'str',
        'decommission_at': 'date',
        'joining_member_account': 'str',
        'purchase_order': 'str',
        'member_joining_rules': 'list[str]',
        'public': 'bool',
        'cloud_key': 'str',
        'diversity': 'int',
        'provider_ref': 'str'
    }

    attribute_map = {
        'consuming_account': 'consuming_account',
        'external_ref': 'external_ref',
        'id': 'id',
        'ixfdb_ixid': 'ixfdb_ixid',
        'managing_account': 'managing_account',
        'metro_area_network': 'metro_area_network',
        'name': 'name',
        'network_features': 'network_features',
        'nsc_required_contact_roles': 'nsc_required_contact_roles',
        'peeringdb_ixid': 'peeringdb_ixid',
        'product_offering': 'product_offering',
        'state': 'state',
        'status': 'status',
        'subnet_v4': 'subnet_v4',
        'subnet_v6': 'subnet_v6',
        'type': 'type',
        'billing_account': 'billing_account',
        'capacity': 'capacity',
        'charged_until': 'charged_until',
        'contract_ref': 'contract_ref',
        'decommission_at': 'decommission_at',
        'joining_member_account': 'joining_member_account',
        'purchase_order': 'purchase_order',
        'member_joining_rules': 'member_joining_rules',
        'public': 'public',
        'cloud_key': 'cloud_key',
        'diversity': 'diversity',
        'provider_ref': 'provider_ref'
    }

    discriminator_value_class_map = {
    }

    def __init__(self, consuming_account=None, external_ref=None, id=None, ixfdb_ixid=None, managing_account=None, metro_area_network=None, name=None, network_features=None, nsc_required_contact_roles=None, peeringdb_ixid=None, product_offering=None, state=None, status=None, subnet_v4=None, subnet_v6=None, type=None, billing_account=None, capacity=None, charged_until=None, contract_ref=None, decommission_at=None, joining_member_account=None, purchase_order='', member_joining_rules=None, public=False, cloud_key=None, diversity=None, provider_ref=None, local_vars_configuration=None):  # noqa: E501
        """NetworkServicePartial - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._consuming_account = None
        self._external_ref = None
        self._id = None
        self._ixfdb_ixid = None
        self._managing_account = None
        self._metro_area_network = None
        self._name = None
        self._network_features = None
        self._nsc_required_contact_roles = None
        self._peeringdb_ixid = None
        self._product_offering = None
        self._state = None
        self._status = None
        self._subnet_v4 = None
        self._subnet_v6 = None
        self._type = None
        self._billing_account = None
        self._capacity = None
        self._charged_until = None
        self._contract_ref = None
        self._decommission_at = None
        self._joining_member_account = None
        self._purchase_order = None
        self._member_joining_rules = None
        self._public = None
        self._cloud_key = None
        self._diversity = None
        self._provider_ref = None
        self.discriminator = 'type'

        if consuming_account is not None:
            self.consuming_account = consuming_account
        self.external_ref = external_ref
        if id is not None:
            self.id = id
        self.ixfdb_ixid = ixfdb_ixid
        if managing_account is not None:
            self.managing_account = managing_account
        if metro_area_network is not None:
            self.metro_area_network = metro_area_network
        if name is not None:
            self.name = name
        if network_features is not None:
            self.network_features = network_features
        if nsc_required_contact_roles is not None:
            self.nsc_required_contact_roles = nsc_required_contact_roles
        self.peeringdb_ixid = peeringdb_ixid
        if product_offering is not None:
            self.product_offering = product_offering
        if state is not None:
            self.state = state
        if status is not None:
            self.status = status
        if subnet_v4 is not None:
            self.subnet_v4 = subnet_v4
        if subnet_v6 is not None:
            self.subnet_v6 = subnet_v6
        self.type = type
        if billing_account is not None:
            self.billing_account = billing_account
        self.capacity = capacity
        if charged_until is not None:
            self.charged_until = charged_until
        self.contract_ref = contract_ref
        if decommission_at is not None:
            self.decommission_at = decommission_at
        if joining_member_account is not None:
            self.joining_member_account = joining_member_account
        if purchase_order is not None:
            self.purchase_order = purchase_order
        if member_joining_rules is not None:
            self.member_joining_rules = member_joining_rules
        if public is not None:
            self.public = public
        if cloud_key is not None:
            self.cloud_key = cloud_key
        if diversity is not None:
            self.diversity = diversity
        self.provider_ref = provider_ref

    @property
    def consuming_account(self):
        """Gets the consuming_account of this NetworkServicePartial.  # noqa: E501

        The `id` of the account consuming a service.  Used to be `owning_customer`.   # noqa: E501

        :return: The consuming_account of this NetworkServicePartial.  # noqa: E501
        :rtype: str
        """
        return self._consuming_account

    @consuming_account.setter
    def consuming_account(self, consuming_account):
        """Sets the consuming_account of this NetworkServicePartial.

        The `id` of the account consuming a service.  Used to be `owning_customer`.   # noqa: E501

        :param consuming_account: The consuming_account of this NetworkServicePartial.  # noqa: E501
        :type: str
        """

        self._consuming_account = consuming_account

    @property
    def external_ref(self):
        """Gets the external_ref of this NetworkServicePartial.  # noqa: E501

        Reference field, free to use for the API user.  # noqa: E501

        :return: The external_ref of this NetworkServicePartial.  # noqa: E501
        :rtype: str
        """
        return self._external_ref

    @external_ref.setter
    def external_ref(self, external_ref):
        """Sets the external_ref of this NetworkServicePartial.

        Reference field, free to use for the API user.  # noqa: E501

        :param external_ref: The external_ref of this NetworkServicePartial.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                external_ref is not None and len(external_ref) > 128):
            raise ValueError("Invalid value for `external_ref`, length must be less than or equal to `128`")  # noqa: E501

        self._external_ref = external_ref

    @property
    def id(self):
        """Gets the id of this NetworkServicePartial.  # noqa: E501


        :return: The id of this NetworkServicePartial.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this NetworkServicePartial.


        :param id: The id of this NetworkServicePartial.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def ixfdb_ixid(self):
        """Gets the ixfdb_ixid of this NetworkServicePartial.  # noqa: E501

        id of ixfdb  # noqa: E501

        :return: The ixfdb_ixid of this NetworkServicePartial.  # noqa: E501
        :rtype: int
        """
        return self._ixfdb_ixid

    @ixfdb_ixid.setter
    def ixfdb_ixid(self, ixfdb_ixid):
        """Sets the ixfdb_ixid of this NetworkServicePartial.

        id of ixfdb  # noqa: E501

        :param ixfdb_ixid: The ixfdb_ixid of this NetworkServicePartial.  # noqa: E501
        :type: int
        """

        self._ixfdb_ixid = ixfdb_ixid

    @property
    def managing_account(self):
        """Gets the managing_account of this NetworkServicePartial.  # noqa: E501

        The `id` of the account responsible for managing the service via the API. A manager can read and update the state of entities.   # noqa: E501

        :return: The managing_account of this NetworkServicePartial.  # noqa: E501
        :rtype: str
        """
        return self._managing_account

    @managing_account.setter
    def managing_account(self, managing_account):
        """Sets the managing_account of this NetworkServicePartial.

        The `id` of the account responsible for managing the service via the API. A manager can read and update the state of entities.   # noqa: E501

        :param managing_account: The managing_account of this NetworkServicePartial.  # noqa: E501
        :type: str
        """

        self._managing_account = managing_account

    @property
    def metro_area_network(self):
        """Gets the metro_area_network of this NetworkServicePartial.  # noqa: E501

        Id of the `MetroAreaNetwork` where the exchange lan network service is directly provided.  Same as `service_metro_area_network` on the related `ProductOffering`.   # noqa: E501

        :return: The metro_area_network of this NetworkServicePartial.  # noqa: E501
        :rtype: str
        """
        return self._metro_area_network

    @metro_area_network.setter
    def metro_area_network(self, metro_area_network):
        """Sets the metro_area_network of this NetworkServicePartial.

        Id of the `MetroAreaNetwork` where the exchange lan network service is directly provided.  Same as `service_metro_area_network` on the related `ProductOffering`.   # noqa: E501

        :param metro_area_network: The metro_area_network of this NetworkServicePartial.  # noqa: E501
        :type: str
        """

        self._metro_area_network = metro_area_network

    @property
    def name(self):
        """Gets the name of this NetworkServicePartial.  # noqa: E501

        Name of the multi-point to multi-point virtual circuit.  # noqa: E501

        :return: The name of this NetworkServicePartial.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this NetworkServicePartial.

        Name of the multi-point to multi-point virtual circuit.  # noqa: E501

        :param name: The name of this NetworkServicePartial.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                name is not None and len(name) > 40):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `40`")  # noqa: E501

        self._name = name

    @property
    def network_features(self):
        """Gets the network_features of this NetworkServicePartial.  # noqa: E501


        :return: The network_features of this NetworkServicePartial.  # noqa: E501
        :rtype: list[str]
        """
        return self._network_features

    @network_features.setter
    def network_features(self, network_features):
        """Sets the network_features of this NetworkServicePartial.


        :param network_features: The network_features of this NetworkServicePartial.  # noqa: E501
        :type: list[str]
        """

        self._network_features = network_features

    @property
    def nsc_required_contact_roles(self):
        """Gets the nsc_required_contact_roles of this NetworkServicePartial.  # noqa: E501

        The configuration will require at least one of each of the specified roles assigned to contacts.  The `RoleAssignment` is associated through the `role_assignments` list property of the network service configuration.  # noqa: E501

        :return: The nsc_required_contact_roles of this NetworkServicePartial.  # noqa: E501
        :rtype: list[str]
        """
        return self._nsc_required_contact_roles

    @nsc_required_contact_roles.setter
    def nsc_required_contact_roles(self, nsc_required_contact_roles):
        """Sets the nsc_required_contact_roles of this NetworkServicePartial.

        The configuration will require at least one of each of the specified roles assigned to contacts.  The `RoleAssignment` is associated through the `role_assignments` list property of the network service configuration.  # noqa: E501

        :param nsc_required_contact_roles: The nsc_required_contact_roles of this NetworkServicePartial.  # noqa: E501
        :type: list[str]
        """

        self._nsc_required_contact_roles = nsc_required_contact_roles

    @property
    def peeringdb_ixid(self):
        """Gets the peeringdb_ixid of this NetworkServicePartial.  # noqa: E501

        PeeringDB ixid  # noqa: E501

        :return: The peeringdb_ixid of this NetworkServicePartial.  # noqa: E501
        :rtype: int
        """
        return self._peeringdb_ixid

    @peeringdb_ixid.setter
    def peeringdb_ixid(self, peeringdb_ixid):
        """Sets the peeringdb_ixid of this NetworkServicePartial.

        PeeringDB ixid  # noqa: E501

        :param peeringdb_ixid: The peeringdb_ixid of this NetworkServicePartial.  # noqa: E501
        :type: int
        """

        self._peeringdb_ixid = peeringdb_ixid

    @property
    def product_offering(self):
        """Gets the product_offering of this NetworkServicePartial.  # noqa: E501


        :return: The product_offering of this NetworkServicePartial.  # noqa: E501
        :rtype: str
        """
        return self._product_offering

    @product_offering.setter
    def product_offering(self, product_offering):
        """Sets the product_offering of this NetworkServicePartial.


        :param product_offering: The product_offering of this NetworkServicePartial.  # noqa: E501
        :type: str
        """

        self._product_offering = product_offering

    @property
    def state(self):
        """Gets the state of this NetworkServicePartial.  # noqa: E501


        :return: The state of this NetworkServicePartial.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this NetworkServicePartial.


        :param state: The state of this NetworkServicePartial.  # noqa: E501
        :type: str
        """
        allowed_values = ["requested", "allocated", "testing", "production", "production_change_pending", "decommission_requested", "decommissioned", "archived", "error", "operator", "scheduled", "cancelled"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and state not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"  # noqa: E501
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def status(self):
        """Gets the status of this NetworkServicePartial.  # noqa: E501


        :return: The status of this NetworkServicePartial.  # noqa: E501
        :rtype: list[Status]
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this NetworkServicePartial.


        :param status: The status of this NetworkServicePartial.  # noqa: E501
        :type: list[Status]
        """

        self._status = status

    @property
    def subnet_v4(self):
        """Gets the subnet_v4 of this NetworkServicePartial.  # noqa: E501

        IPv4 subnet in [dot-decimal notation](https://en.wikipedia.org/wiki/Dot-decimal_notation) CIDR notation.   # noqa: E501

        :return: The subnet_v4 of this NetworkServicePartial.  # noqa: E501
        :rtype: str
        """
        return self._subnet_v4

    @subnet_v4.setter
    def subnet_v4(self, subnet_v4):
        """Sets the subnet_v4 of this NetworkServicePartial.

        IPv4 subnet in [dot-decimal notation](https://en.wikipedia.org/wiki/Dot-decimal_notation) CIDR notation.   # noqa: E501

        :param subnet_v4: The subnet_v4 of this NetworkServicePartial.  # noqa: E501
        :type: str
        """

        self._subnet_v4 = subnet_v4

    @property
    def subnet_v6(self):
        """Gets the subnet_v6 of this NetworkServicePartial.  # noqa: E501

        IPv6 subnet in hexadecimal colon separated CIDR notation.   # noqa: E501

        :return: The subnet_v6 of this NetworkServicePartial.  # noqa: E501
        :rtype: str
        """
        return self._subnet_v6

    @subnet_v6.setter
    def subnet_v6(self, subnet_v6):
        """Sets the subnet_v6 of this NetworkServicePartial.

        IPv6 subnet in hexadecimal colon separated CIDR notation.   # noqa: E501

        :param subnet_v6: The subnet_v6 of this NetworkServicePartial.  # noqa: E501
        :type: str
        """

        self._subnet_v6 = subnet_v6

    @property
    def type(self):
        """Gets the type of this NetworkServicePartial.  # noqa: E501


        :return: The type of this NetworkServicePartial.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this NetworkServicePartial.


        :param type: The type of this NetworkServicePartial.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and type is None:  # noqa: E501
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def billing_account(self):
        """Gets the billing_account of this NetworkServicePartial.  # noqa: E501

        An account requires billing_information to be used as a `billing_account`.  # noqa: E501

        :return: The billing_account of this NetworkServicePartial.  # noqa: E501
        :rtype: str
        """
        return self._billing_account

    @billing_account.setter
    def billing_account(self, billing_account):
        """Sets the billing_account of this NetworkServicePartial.

        An account requires billing_information to be used as a `billing_account`.  # noqa: E501

        :param billing_account: The billing_account of this NetworkServicePartial.  # noqa: E501
        :type: str
        """

        self._billing_account = billing_account

    @property
    def capacity(self):
        """Gets the capacity of this NetworkServicePartial.  # noqa: E501

        The capacity of the service in Mbps. When null, the maximum capacity will be used.  # noqa: E501

        :return: The capacity of this NetworkServicePartial.  # noqa: E501
        :rtype: int
        """
        return self._capacity

    @capacity.setter
    def capacity(self, capacity):
        """Sets the capacity of this NetworkServicePartial.

        The capacity of the service in Mbps. When null, the maximum capacity will be used.  # noqa: E501

        :param capacity: The capacity of this NetworkServicePartial.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                capacity is not None and capacity < 1):  # noqa: E501
            raise ValueError("Invalid value for `capacity`, must be a value greater than or equal to `1`")  # noqa: E501

        self._capacity = capacity

    @property
    def charged_until(self):
        """Gets the charged_until of this NetworkServicePartial.  # noqa: E501

        Your obligation to pay for the service will end on this date. Typically `≥ decommission_at`.  This field is only used when the state is `DECOMMISSION_REQUESTED` or `DECOMMISSIONED`.  # noqa: E501

        :return: The charged_until of this NetworkServicePartial.  # noqa: E501
        :rtype: date
        """
        return self._charged_until

    @charged_until.setter
    def charged_until(self, charged_until):
        """Sets the charged_until of this NetworkServicePartial.

        Your obligation to pay for the service will end on this date. Typically `≥ decommission_at`.  This field is only used when the state is `DECOMMISSION_REQUESTED` or `DECOMMISSIONED`.  # noqa: E501

        :param charged_until: The charged_until of this NetworkServicePartial.  # noqa: E501
        :type: date
        """

        self._charged_until = charged_until

    @property
    def contract_ref(self):
        """Gets the contract_ref of this NetworkServicePartial.  # noqa: E501

        A reference to a contract. If no specific contract is used, a default MAY be chosen by the implementer.   # noqa: E501

        :return: The contract_ref of this NetworkServicePartial.  # noqa: E501
        :rtype: str
        """
        return self._contract_ref

    @contract_ref.setter
    def contract_ref(self, contract_ref):
        """Sets the contract_ref of this NetworkServicePartial.

        A reference to a contract. If no specific contract is used, a default MAY be chosen by the implementer.   # noqa: E501

        :param contract_ref: The contract_ref of this NetworkServicePartial.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                contract_ref is not None and len(contract_ref) > 128):
            raise ValueError("Invalid value for `contract_ref`, length must be less than or equal to `128`")  # noqa: E501

        self._contract_ref = contract_ref

    @property
    def decommission_at(self):
        """Gets the decommission_at of this NetworkServicePartial.  # noqa: E501

        The service will be decommissioned on this date.  This field is only used when the state is `DECOMMISSION_REQUESTED` or `DECOMMISSIONED`.  # noqa: E501

        :return: The decommission_at of this NetworkServicePartial.  # noqa: E501
        :rtype: date
        """
        return self._decommission_at

    @decommission_at.setter
    def decommission_at(self, decommission_at):
        """Sets the decommission_at of this NetworkServicePartial.

        The service will be decommissioned on this date.  This field is only used when the state is `DECOMMISSION_REQUESTED` or `DECOMMISSIONED`.  # noqa: E501

        :param decommission_at: The decommission_at of this NetworkServicePartial.  # noqa: E501
        :type: date
        """

        self._decommission_at = decommission_at

    @property
    def joining_member_account(self):
        """Gets the joining_member_account of this NetworkServicePartial.  # noqa: E501

        The account of the B-side member joining the virtual circuit.   # noqa: E501

        :return: The joining_member_account of this NetworkServicePartial.  # noqa: E501
        :rtype: str
        """
        return self._joining_member_account

    @joining_member_account.setter
    def joining_member_account(self, joining_member_account):
        """Sets the joining_member_account of this NetworkServicePartial.

        The account of the B-side member joining the virtual circuit.   # noqa: E501

        :param joining_member_account: The joining_member_account of this NetworkServicePartial.  # noqa: E501
        :type: str
        """

        self._joining_member_account = joining_member_account

    @property
    def purchase_order(self):
        """Gets the purchase_order of this NetworkServicePartial.  # noqa: E501

        Purchase Order ID which will be displayed on the invoice.   # noqa: E501

        :return: The purchase_order of this NetworkServicePartial.  # noqa: E501
        :rtype: str
        """
        return self._purchase_order

    @purchase_order.setter
    def purchase_order(self, purchase_order):
        """Sets the purchase_order of this NetworkServicePartial.

        Purchase Order ID which will be displayed on the invoice.   # noqa: E501

        :param purchase_order: The purchase_order of this NetworkServicePartial.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                purchase_order is not None and len(purchase_order) > 80):
            raise ValueError("Invalid value for `purchase_order`, length must be less than or equal to `80`")  # noqa: E501

        self._purchase_order = purchase_order

    @property
    def member_joining_rules(self):
        """Gets the member_joining_rules of this NetworkServicePartial.  # noqa: E501


        :return: The member_joining_rules of this NetworkServicePartial.  # noqa: E501
        :rtype: list[str]
        """
        return self._member_joining_rules

    @member_joining_rules.setter
    def member_joining_rules(self, member_joining_rules):
        """Sets the member_joining_rules of this NetworkServicePartial.


        :param member_joining_rules: The member_joining_rules of this NetworkServicePartial.  # noqa: E501
        :type: list[str]
        """

        self._member_joining_rules = member_joining_rules

    @property
    def public(self):
        """Gets the public of this NetworkServicePartial.  # noqa: E501

        A public mp2mp network service can be joined by everyone on the exchange unless denied by a member-joining-rule.  Public network services are visible to other members of the IXP, however only `name`, `type`, `product_offering`, `consuming_account` and `managing_account` are made available.  Other required fields are redacted.  # noqa: E501

        :return: The public of this NetworkServicePartial.  # noqa: E501
        :rtype: bool
        """
        return self._public

    @public.setter
    def public(self, public):
        """Sets the public of this NetworkServicePartial.

        A public mp2mp network service can be joined by everyone on the exchange unless denied by a member-joining-rule.  Public network services are visible to other members of the IXP, however only `name`, `type`, `product_offering`, `consuming_account` and `managing_account` are made available.  Other required fields are redacted.  # noqa: E501

        :param public: The public of this NetworkServicePartial.  # noqa: E501
        :type: bool
        """

        self._public = public

    @property
    def cloud_key(self):
        """Gets the cloud_key of this NetworkServicePartial.  # noqa: E501


        :return: The cloud_key of this NetworkServicePartial.  # noqa: E501
        :rtype: str
        """
        return self._cloud_key

    @cloud_key.setter
    def cloud_key(self, cloud_key):
        """Sets the cloud_key of this NetworkServicePartial.


        :param cloud_key: The cloud_key of this NetworkServicePartial.  # noqa: E501
        :type: str
        """

        self._cloud_key = cloud_key

    @property
    def diversity(self):
        """Gets the diversity of this NetworkServicePartial.  # noqa: E501

        Same value as the corresponding `ProductOffering`.  The service can be delivered over multiple handovers from the exchange to the `service_provider`.  The `diversity` denotes the number of handovers between the exchange and the service provider. A value of two signals a redundant service.  Only one network service configuration for each `handover` and `cloud_vlan` can be created.  # noqa: E501

        :return: The diversity of this NetworkServicePartial.  # noqa: E501
        :rtype: int
        """
        return self._diversity

    @diversity.setter
    def diversity(self, diversity):
        """Sets the diversity of this NetworkServicePartial.

        Same value as the corresponding `ProductOffering`.  The service can be delivered over multiple handovers from the exchange to the `service_provider`.  The `diversity` denotes the number of handovers between the exchange and the service provider. A value of two signals a redundant service.  Only one network service configuration for each `handover` and `cloud_vlan` can be created.  # noqa: E501

        :param diversity: The diversity of this NetworkServicePartial.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                diversity is not None and diversity < 1):  # noqa: E501
            raise ValueError("Invalid value for `diversity`, must be a value greater than or equal to `1`")  # noqa: E501

        self._diversity = diversity

    @property
    def provider_ref(self):
        """Gets the provider_ref of this NetworkServicePartial.  # noqa: E501

        For a cloud network service with the exchange first workflow, the `provider_ref` will be a reference to a resource of the cloud provider. (E.g. the UUID of a virtual circuit.)  The `provider_ref` is managed by the exchange and its meaning may vary between different cloud services.   # noqa: E501

        :return: The provider_ref of this NetworkServicePartial.  # noqa: E501
        :rtype: str
        """
        return self._provider_ref

    @provider_ref.setter
    def provider_ref(self, provider_ref):
        """Sets the provider_ref of this NetworkServicePartial.

        For a cloud network service with the exchange first workflow, the `provider_ref` will be a reference to a resource of the cloud provider. (E.g. the UUID of a virtual circuit.)  The `provider_ref` is managed by the exchange and its meaning may vary between different cloud services.   # noqa: E501

        :param provider_ref: The provider_ref of this NetworkServicePartial.  # noqa: E501
        :type: str
        """

        self._provider_ref = provider_ref

    def get_real_child_model(self, data):
        """Returns the real base class specified by the discriminator"""
        discriminator_key = self.attribute_map[self.discriminator]
        discriminator_value = data[discriminator_key]
        return self.discriminator_value_class_map.get(discriminator_value)

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NetworkServicePartial):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, NetworkServicePartial):
            return True

        return self.to_dict() != other.to_dict()

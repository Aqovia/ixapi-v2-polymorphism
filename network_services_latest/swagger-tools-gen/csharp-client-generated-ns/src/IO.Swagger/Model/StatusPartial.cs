/* 
 * IX-API
 *
 *  This API allows to config/change/delete Internet Exchange services.  # Filters  When querying collections, the provided query parameters are validated. Unknown query parameters are ignored. Providing invalid filter values should yield a validation error. 
 *
 * OpenAPI spec version: 2.2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Status Message
    /// </summary>
    [DataContract]
        public partial class StatusPartial :  IEquatable<StatusPartial>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StatusPartial" /> class.
        /// </summary>
        /// <param name="attrs">attrs.</param>
        /// <param name="message">message.</param>
        /// <param name="severity">We are using syslog severity levels: 0 &#x3D; Emergency, 1 &#x3D; Alert, 2 &#x3D; Critical, 3 &#x3D; Error, 4 &#x3D; Warning, 5 &#x3D; Notice, 6 &#x3D; Informational, 7 &#x3D; Debug. .</param>
        /// <param name="tag">tag.</param>
        /// <param name="timestamp">timestamp.</param>
        public StatusPartial(Object attrs = default(Object), string message = default(string), int? severity = default(int?), string tag = default(string), DateTime? timestamp = default(DateTime?))
        {
            this.Attrs = attrs;
            this.Message = message;
            this.Severity = severity;
            this.Tag = tag;
            this.Timestamp = timestamp;
        }
        
        /// <summary>
        /// Gets or Sets Attrs
        /// </summary>
        [DataMember(Name="attrs", EmitDefaultValue=false)]
        public Object Attrs { get; set; }

        /// <summary>
        /// Gets or Sets Message
        /// </summary>
        [DataMember(Name="message", EmitDefaultValue=false)]
        public string Message { get; set; }

        /// <summary>
        /// We are using syslog severity levels: 0 &#x3D; Emergency, 1 &#x3D; Alert, 2 &#x3D; Critical, 3 &#x3D; Error, 4 &#x3D; Warning, 5 &#x3D; Notice, 6 &#x3D; Informational, 7 &#x3D; Debug. 
        /// </summary>
        /// <value>We are using syslog severity levels: 0 &#x3D; Emergency, 1 &#x3D; Alert, 2 &#x3D; Critical, 3 &#x3D; Error, 4 &#x3D; Warning, 5 &#x3D; Notice, 6 &#x3D; Informational, 7 &#x3D; Debug. </value>
        [DataMember(Name="severity", EmitDefaultValue=false)]
        public int? Severity { get; set; }

        /// <summary>
        /// Gets or Sets Tag
        /// </summary>
        [DataMember(Name="tag", EmitDefaultValue=false)]
        public string Tag { get; set; }

        /// <summary>
        /// Gets or Sets Timestamp
        /// </summary>
        [DataMember(Name="timestamp", EmitDefaultValue=false)]
        public DateTime? Timestamp { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StatusPartial {\n");
            sb.Append("  Attrs: ").Append(Attrs).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  Severity: ").Append(Severity).Append("\n");
            sb.Append("  Tag: ").Append(Tag).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StatusPartial);
        }

        /// <summary>
        /// Returns true if StatusPartial instances are equal
        /// </summary>
        /// <param name="input">Instance of StatusPartial to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StatusPartial input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Attrs == input.Attrs ||
                    (this.Attrs != null &&
                    this.Attrs.Equals(input.Attrs))
                ) && 
                (
                    this.Message == input.Message ||
                    (this.Message != null &&
                    this.Message.Equals(input.Message))
                ) && 
                (
                    this.Severity == input.Severity ||
                    (this.Severity != null &&
                    this.Severity.Equals(input.Severity))
                ) && 
                (
                    this.Tag == input.Tag ||
                    (this.Tag != null &&
                    this.Tag.Equals(input.Tag))
                ) && 
                (
                    this.Timestamp == input.Timestamp ||
                    (this.Timestamp != null &&
                    this.Timestamp.Equals(input.Timestamp))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Attrs != null)
                    hashCode = hashCode * 59 + this.Attrs.GetHashCode();
                if (this.Message != null)
                    hashCode = hashCode * 59 + this.Message.GetHashCode();
                if (this.Severity != null)
                    hashCode = hashCode * 59 + this.Severity.GetHashCode();
                if (this.Tag != null)
                    hashCode = hashCode * 59 + this.Tag.GetHashCode();
                if (this.Timestamp != null)
                    hashCode = hashCode * 59 + this.Timestamp.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
